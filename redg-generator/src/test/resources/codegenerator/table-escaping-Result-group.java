/*
 * This file was generated by RedG.
 * https://btc-ag.github.io/redg
 *       ____           ________
 *      / __ \___  ____/ / ____/
 *     / /_/ / _ \/ __  / / __
 *    / _, _/  __/ /_/ / /_/ /
 *   /_/ |_|\___/\__,_/\____/
 *
 * DO NOT EDIT MANUALLY!
 * Re-run the code generation to reflect database changes.
 */
package com.btc.redg.generated;

import java.util.ArrayList;
import java.util.List;

import com.btc.redg.runtime.*;
import com.btc.redg.models.*;

/**
 * <table summary="The table model attributes and their values">
 *     <tr>
 *         <td><strong>Attribute</strong></td>
 *         <td><strong>Value</strong></td>
 *     </tr>
 *     <tr>
 *         <td>Table name</td>
 *         <td>"GROUP"</td>
 *     </tr>
 *     <tr>
 *         <td>Full table name</td>
 *         <td>"RT-CG-TE".PUBLIC."GROUP"</td>
 *     </tr>
 * </table>
 */
public class GGroup implements RedGEntity {

    protected AbstractRedG redG;

    // do not manually make this public and instantiate it directly. Use the RedG Main class
    GGroup(AbstractRedG redG, GTable tableTable) {
        this.redG = redG;
        if (tableTable == null) {
            throw new IllegalArgumentException("tableTable may not be null!");
        }
        this.tableTable = tableTable;


        try {
            this.id = redG.getDefaultValueStrategy().getDefaultValue(getTableModel().getColumnBySQLName("ID"), java.math.BigDecimal.class);

        } catch (Exception e) {
            throw new RuntimeException("Could not get default value", e);
        }
    }

    GGroup(boolean generateDefaultValues, AbstractRedG redG) {
        // First parameter exists simply because this constructor needs a different signature from the constructor above if the tables have no NOT NULL FK
        // Only for ExistingGGroup and usage with Supplier-Functions , otherwise NOT NULL constraints cannot be checked and no default values are generated.
        this.redG = redG;
        if (generateDefaultValues) {
            try {
                this.id = redG.getDefaultValueStrategy().getDefaultValue(getTableModel().getColumnBySQLName("ID"), java.math.BigDecimal.class);

            } catch (Exception e) {
                throw new RuntimeException("Could not get default value", e);
            }
        }
    }

    private java.math.BigDecimal id;

    /**
     * <table summary="The column model attributes and their values">
     *     <tr>
     *         <td><strong>Attribute</strong></td>
     *         <td><strong>Value</strong></td>
     *     </tr>
     *     <tr>
     *         <td>Table name</td>
     *         <td>"GROUP"</td>
     *     </tr>
     *     <tr>
     *         <td>Full table name</td>
     *         <td>"RT-CG-TE".PUBLIC."GROUP"</td>
     *     </tr>
     *     <tr>
     *         <td>Column name</td>
     *         <td>ID</td>
     *     </tr>
     *     <tr>
     *         <td>SQL type</td>
     *         <td>DECIMAL</td>
     *     </tr>
     *     <tr>
     *         <td>Not nullable?</td>
     *         <td>true</td>
     *     </tr>
     *     <tr>
     *         <td>Part of Primary key?</td>
     *         <td>true</td>
     *     </tr>
     *     <tr>
     *         <td>Unique?</td>
     *         <td>true</td>
     *     </tr>
     * </table>
     */
    public GGroup id(java.math.BigDecimal value) {
        if (value == null) {
            throw new IllegalArgumentException("Setting id to null violates a NOT NULL constraint!");
        }
        this.id = value;
        return this;
    }

    /**
     * <table summary="The column model attributes and their values">
     *     <tr>
     *         <td><strong>Attribute</strong></td>
     *         <td><strong>Value</strong></td>
     *     </tr>
     *     <tr>
     *         <td>Table name</td>
     *         <td>"GROUP"</td>
     *     </tr>
     *     <tr>
     *         <td>Full table name</td>
     *         <td>"RT-CG-TE".PUBLIC."GROUP"</td>
     *     </tr>
     *     <tr>
     *         <td>Column name</td>
     *         <td>ID</td>
     *     </tr>
     *     <tr>
     *         <td>SQL type</td>
     *         <td>DECIMAL</td>
     *     </tr>
     *     <tr>
     *         <td>Not nullable?</td>
     *         <td>true</td>
     *     </tr>
     *     <tr>
     *         <td>Part of Primary key?</td>
     *         <td>true</td>
     *     </tr>
     *     <tr>
     *         <td>Unique?</td>
     *         <td>true</td>
     *     </tr>
     * </table>
     */
    public java.math.BigDecimal id() {
        return this.id;
    }


    private GTable tableTable;

    /**
     * This is a foreign key referencing {@link GTable}
     */
    public GGroup tableTable(GTable value) {
        if (value == null) {
            throw new IllegalArgumentException("Setting tableTable to null violates a NOT NULL constraint!");
        }
        this.tableTable = value;
        return this;
    }

    /**
     * This is a foreign key referencing {@link GTable}
     */
    public GTable tableTable() {
        return this.tableTable;
    }


    /**
     * <table summary="The column model attributes and their values">
     *     <tr>
     *         <td><strong>Attribute</strong></td>
     *         <td><strong>Value</strong></td>
     *     </tr>
     *     <tr>
     *         <td>Table name</td>
     *         <td>"GROUP"</td>
     *     </tr>
     *     <tr>
     *         <td>Full table name</td>
     *         <td>"RT-CG-TE".PUBLIC."GROUP"</td>
     *     </tr>
     *     <tr>
     *         <td>Column name</td>
     *         <td>"TABLE"</td>
     *     </tr>
     *     <tr>
     *         <td>SQL type</td>
     *         <td>DECIMAL</td>
     *     </tr>
     * </table>
     */
    public java.math.BigDecimal table() {
        return this.tableTable.id();
    }

    public List<RedGEntity> getDependencies() {
        List<RedGEntity> dependencies = new ArrayList<>();
        if (tableTable != null) dependencies.add(tableTable);
        return dependencies;
    }


    public String getSQLString() {
        return String.format("INSERT INTO \"GROUP\" (" +
                        "\"TABLE\"" +
                        "" +
                        ", " +
                        "ID" +
                        ") VALUES (" +
                        "%s" +
                        "" +
                        ", " +
                        "%s)",
                this.redG.getSqlValuesFormatter().formatValue(this.tableTable.id(),
                        "DECIMAL", "\"RT-CG-TE\".PUBLIC.\"GROUP\"",
                        "\"GROUP\"", "\"TABLE\""),
                this.redG.getSqlValuesFormatter().formatValue(this.id(),
                        "DECIMAL", "\"RT-CG-TE\".PUBLIC.\"GROUP\"",
                        "\"GROUP\"", "ID")
        );
    }

    public String getPreparedStatementString() {
        return "INSERT INTO \"GROUP\" (" +
                "\"TABLE\"" +
                "" +
                ", " +
                "ID" +
                ") VALUES (" +
                "?" +
                "" +
                ", " +
                "?)";
    }

    public Object[] getPreparedStatementValues() {
        return new Object[]{
                this.tableTable.id(),
                this.id()
        };
    }

    public AttributeMetaInfo[] getPreparedStatementValuesMetaInfos() {
        return new AttributeMetaInfo[]{
                new AttributeMetaInfo("\"TABLE\"", "\"GROUP\"", "\"RT-CG-TE\".PUBLIC.\"GROUP\"", "DECIMAL", 3, java.math.BigDecimal.class, true),
                new AttributeMetaInfo("ID", "\"GROUP\"", "\"RT-CG-TE\".PUBLIC.\"GROUP\"", "DECIMAL", 3, java.math.BigDecimal.class, true)
        };
    }

    private static String serializedTableModel = "rO0ABXNyAB5jb20uYnRjLnJlZGcubW9kZWxzLlRhYmxlTW9kZWx0b/Ys7hpPuAIACloAGGhhc0NvbHVtbnNBbmRGb3JlaWduS2V5c0wACWNsYXNzTmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO0wAB2NvbHVtbnN0ABBMamF2YS91dGlsL0xpc3Q7TAALZm9yZWlnbktleXNxAH4AAkwAE2luY29taW5nRm9yZWlnbktleXNxAH4AAkwAF2pvaW5UYWJsZVNpbXBsaWZpZXJEYXRhdAAPTGphdmEvdXRpbC9NYXA7TAAEbmFtZXEAfgABTAALcGFja2FnZU5hbWVxAH4AAUwAC3NxbEZ1bGxOYW1lcQB+AAFMAAdzcWxOYW1lcQB+AAF4cAF0AAZHR3JvdXBzcgATamF2YS51dGlsLkFycmF5TGlzdHiB0h2Zx2GdAwABSQAEc2l6ZXhwAAAAAncEAAAAAnNyAB9jb20uYnRjLnJlZGcubW9kZWxzLkNvbHVtbk1vZGVsZ6XLR7cE1PwCAA1aABFleHBsaWNpdEF0dHJpYnV0ZVoAB25vdE51bGxaABBwYXJ0T2ZGb3JlaWduS2V5WgAQcGFydE9mUHJpbWFyeUtleUkACnNxbFR5cGVJbnRaAAZ1bmlxdWVMABJjb252ZW5pZW5jZVNldHRlcnNxAH4AAkwAD2RiRnVsbFRhYmxlTmFtZXEAfgABTAAGZGJOYW1lcQB+AAFMAAtkYlRhYmxlTmFtZXEAfgABTAAMamF2YVR5cGVOYW1lcQB+AAFMAARuYW1lcQB+AAFMAAdzcWxUeXBlcQB+AAF4cAABAAEAAAADAXNyAB9qYXZhLnV0aWwuQ29sbGVjdGlvbnMkRW1wdHlMaXN0ergXtDynnt4CAAB4cHQAGSJSVC1DRy1URSIuUFVCTElDLiJHUk9VUCJ0AAJJRHQAByJHUk9VUCJ0ABRqYXZhLm1hdGguQmlnRGVjaW1hbHQAAmlkdAAHREVDSU1BTHNxAH4ACAABAQAAAAADAHEAfgALdAAZIlJULUNHLVRFIi5QVUJMSUMuIkdST1VQInQAByJUQUJMRSJxAH4ADnEAfgAPdAAFdGFibGVxAH4AEXhzcQB+AAYAAAABdwQAAAABc3IAI2NvbS5idGMucmVkZy5tb2RlbHMuRm9yZWlnbktleU1vZGVssCKOpfjX2JACAARaAAdub3ROdWxsTAAMamF2YVR5cGVOYW1lcQB+AAFMAARuYW1lcQB+AAFMAApyZWZlcmVuY2VzcQB+AAN4cAF0AAZHVGFibGV0AAp0YWJsZVRhYmxlc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAFxAH4AFHNyACljb20uYnRjLnJlZGcubW9kZWxzLkZvcmVpZ25LZXlDb2x1bW5Nb2RlbEp74Kp2qOp+AgAISQAKc3FsVHlwZUludEwAD2RiRnVsbFRhYmxlTmFtZXEAfgABTAAGZGJOYW1lcQB+AAFMAAtkYlRhYmxlTmFtZXEAfgABTAAJbG9jYWxOYW1lcQB+AAFMAAlsb2NhbFR5cGVxAH4AAUwAF3ByaW1hcnlLZXlBdHRyaWJ1dGVOYW1lcQB+AAFMAAdzcWxUeXBlcQB+AAF4cAAAAAN0ABkiUlQtQ0ctVEUiLlBVQkxJQy4iR1JPVVAicQB+ABRxAH4ADnQABXRhYmxlcQB+AA90AAJpZHEAfgAReHhzcQB+AAYAAAAAdwQAAAAAeHNxAH4AGz9AAAAAAAAAdwgAAAAQAAAAAHh0AAVHcm91cHQAFmNvbS5idGMucmVkZy5nZW5lcmF0ZWR0ABkiUlQtQ0ctVEUiLlBVQkxJQy4iR1JPVVAicQB+AA4=";
    private static TableModel tableModel;

    public static String getSerializedTableModel() {
        return serializedTableModel;
    }

    public static TableModel getTableModel() {
        if (tableModel == null) {
            byte[] data = java.util.Base64.getDecoder().decode(serializedTableModel);
            try {
                java.io.ObjectInputStream ois = new java.io.ObjectInputStream(new java.io.ByteArrayInputStream(data));
                tableModel = (TableModel) ois.readObject();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
        return tableModel;
    }
}